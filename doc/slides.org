#+title: Writing go guided by tests
#+OPTIONS: reveal_title_slide:nil toc:nil reveal_slide_number:nil num:nil
#+REVEAL_THEME: beige

* Intro

** Why go?

   - Google
   - Engineering decisions

** Installing go in MacOS

   - =xcode-select --install=
   - =make=
   - use homebrew to install =go= and =dep=

** Development environments

   - emacs / vi
   - Atom / VSCode
   - IntelliJ / GoLand
    

* First steps

** How to create a go project
   - =x/y/z=
   - =$GOPATH/src/x/y/z=
     - default: =~/go=
   - =git clone ...=

** Setting up
   - =git clone https://github.com/c-garcia/go-with-tests.git=

     
** Packages and projects 
   
   - =GOPATH=: where our code lives (default =~/Go=)
     - =src=: projects
     - =bin=: binary tools (add it to =PATH=)
     - =pkg=: libs

** Go searching

   #+begin_src go :exports code :eval never
     package mypackage

     import "xxx/yyy/zzz" // import tag

     func main(){
             zzz.HelloWorld()
     }
   #+end_src

   should be in =$GOPATH/src/xxx/yyy/zzz=

** =xxx/yyy/zzz=? 

   - That would be a project
   - Normally, it is more like =github.com/c-garcia/example=
   - There is a =$GOPATH/src/github.com/c-garcia/example=

** Packages

   - a package, a directory. Example: =$GOPATH/src/github.com/c-garcia/example/pkg1=
   - *for now*:
     - the files in the directory implement the package
     - all files in the directory begin with =package pkg1=
     - those files whose names =*_test.go= are tests

   
** Our first function

   *File*: =pkg/calc/operations.go=
   #+begin_src go :exports code :eval never
     package calc // same as directory name
     // typed language
     func Double(x int) int { // types
             return 2.0 * x // return statement
     }
   #+end_src

    *Notice*: initial capital letter

** Using =go doc= and =godoc=

   - =go doc fmt=
   - =go doc fmt.Printf=
   - =go doc github.com/c-garcia/...=

** Our first test
   
   *File*: =pkg/calc/operations_test.go=
   #+begin_src go :exports code :eval never
     package calc // same package

     import "testing"

     func TestDouble(t *testing.T){ // test name
             expected := 4 // No semicolon. Short assignment
             var actual int  // Variable declaration
             actual = Double(2) // Func call and assignment
             if expected != actual { // if. No parenthesis
                     t.Fatal("The double of 2 should be 4")
             }
     }
   #+end_src

** Running the tests

   =go test -v ./...=

   or

   =make test=
   
** Let's try

   - Checkout the =s01= tag
   - Complete the =Sum= function
   - Create a new =Diff= function

* Control structures


** =if=

   #+begin_src go :exports code :eval never
     var result bool

     if result {
             // ...
     } else {
             // ...
     }
   #+end_src

** more =if=

   #+begin_src go :exports code :eval never
     if err := file.Close(); err != nil {
             // ...
     }

     err = 1 // err exists only in within the if body
   #+end_src

** =for=

   Same as C but without parentheses

   #+begin_src go :exports code :eval never

     for i:=1; i<10; i++ {
             // ...
     }

     for i < 10 {
             //...
     }

     for {
             // ...
     }

   #+end_src

** The GCD function

   #+begin_src go :exports code :eval never
     // GCD returns the Greatest common divisor
     func GCD(x, y int) int {
             if x == y {
                     return x
             } else if x > y {
                     return GCD(x-y, y)
             } else {
                     return GCD(x, y-x)
             }
     }
   #+end_src

** Benchmarks

   #+begin_src go :exports code :eval never
     // * Benchmark for GCD
     func BenchmarkGCD(b *testing.B) {
             for n := 0; n < b.N; n++ {
                     GCD(39916801, 479001599)
             }
     }
   #+end_src

** Run the benchmarks

   #+begin_src sh :exports code :eval never
     go test -bench=. ./... # or
     make bench
   #+end_src

** Let's try

   - check out the =s03= tag
   - Make an Iterative version of =GCD=: =GCDIt=
   - Benchmark it and compare both results

* More friendly tests

** go =dep=

   - vendoring tool
   - =dep init=
   - How it works? =dep ensure=
   - Files to check in

** Installing =testify/assert=

   #+begin_src go :exports code :eval never
     import (
             "testing"

             "github.com/stretchr/testify/assert"
     )

     // * Test for LCM
     func TestLCM(t *testing.M) {
          assert.Equal(t, 60, LCM(12, 15))
     }
   #+end_src

   *Run* =dep ensure= (and that's all)

   
* strings

** strings

   - value type
   - immutable
   - unicode, =utf-8= encoded
   - characters: =rune=

** =for= and =range=
   
   #+begin_src go :exports code :eval never
     // FindRune returns the first index of the rune r in the string s
     func FindRune(s string, r rune) int {
             for i, n := range s {
                     if n == r {
                             return i
                     }
             }
             return -1
     }
   #+end_src


** Let's try

   - checkout the =s06= tag
   - Implement the =RuneCountEquals= function


* types and programs

** typing in go

  - Integer: =int=, =[u]int{8,16,32,64}=
  - Float/Complex: =float{32,64}=, =complex{32,64}=
  - String: =string=
  - array: fixed size =[4]int=
  - slice: dynamic size =[]size=
  - pointers: =*int=

** Creating a program

   - directory =cmd/xxxx=
   - package =main=

** interesting packages   

   | package | purpose                                  |
   |---------+------------------------------------------|
   | =fmt=   | formatting and printing strings          |
   | =os=    | Operating system. Command line arguments |
   | =flag=  | Command line argument parsing            |

** subtests

* Reference

** Tags

   | tag   | description                         |
   |-------+-------------------------------------|
   | =s01= | Starting point. Complete first test |
